# Pre-commit hooks configuration
# See https://pre-commit.com for more information

repos:
  # Security: Detect secrets and credentials
  - repo: https://github.com/Yelp/detect-secrets
    rev: v1.5.0
    hooks:
      - id: detect-secrets
        name: 🔒 Detect secrets
        args: ['--baseline', '.secrets.baseline']
        exclude: package.lock.json

  # Pre-commit built-in hooks
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v5.0.0
    hooks:
      # Security checks
      - id: detect-private-key
        name: 🔑 Detect private keys
      - id: check-added-large-files
        name: 📦 Check for large files
        args: ['--maxkb=500']

      # Code quality
      - id: trailing-whitespace
        name: ✂️  Trim trailing whitespace
      - id: end-of-file-fixer
        name: 📝 Fix end of files
      - id: check-yaml
        name: ✅ Check YAML
      - id: check-json
        name: ✅ Check JSON
      - id: check-toml
        name: ✅ Check TOML
      - id: check-merge-conflict
        name: 🔀 Check for merge conflicts
      - id: check-case-conflict
        name: 📁 Check for case conflicts
      - id: mixed-line-ending
        name: 🔚 Check line endings
        args: ['--fix=lf']

      # Python specific
      - id: check-ast
        name: 🐍 Check Python AST
      - id: check-docstring-first
        name: 📚 Check docstring first
      - id: debug-statements
        name: 🐛 Check for debug statements
      - id: name-tests-test
        name: 🧪 Check test naming
        args: ['--pytest-test-first']
        exclude: ^tests/(conftest\.py|__init__\.py)$

  # Python formatting with Black
  - repo: https://github.com/psf/black
    rev: 25.9.0
    hooks:
      - id: black
        name: ⬛ Format with Black
        language_version: python3.11

  # Import sorting with isort
  - repo: https://github.com/PyCQA/isort
    rev: 7.0.0
    hooks:
      - id: isort
        name: 📦 Sort imports with isort
        args: ["--profile", "black"]

  # Linting with flake8
  - repo: https://github.com/PyCQA/flake8
    rev: 7.3.0
    hooks:
      - id: flake8
        name: 🔍 Lint with flake8
        args: [
          '--max-line-length=120',
          '--extend-ignore=E203,W503,E501',  # More strict: removed D, F401, F841, E722, E402, F541
          '--max-complexity=10',
          '--per-file-ignores=__init__.py:F401,tests/*:F401,F841',
        ]
        additional_dependencies: [
          'flake8-bugbear',        # Find likely bugs and design problems
          'flake8-comprehensions',  # Better list/dict comprehensions
          'flake8-simplify',        # Simplify code suggestions
        ]

  # Security scanning with bandit
  - repo: https://github.com/PyCQA/bandit
    rev: 1.8.0
    hooks:
      - id: bandit
        name: 🛡️  Security scan with bandit
        args: ['-c', 'pyproject.toml']
        additional_dependencies: ['bandit[toml]']
        exclude: ^tests/

  # Docstring checking with pydocstyle
  - repo: https://github.com/PyCQA/pydocstyle
    rev: 6.3.0
    hooks:
      - id: pydocstyle
        name: 📖 Check docstrings with pydocstyle
        args: [
          '--convention=google',
          '--add-ignore=D100,D104,D105,D107,D212',  # Added D212
        ]
        exclude: ^(tests/|examples)

  # Type checking with mypy (optional - requires type annotations)
  # Uncomment to enable strict type checking:
  # - repo: https://github.com/pre-commit/mirrors-mypy
  #   rev: v1.18.2
  #   hooks:
  #     - id: mypy
  #       name: 🔍 Type check with mypy
  #       args: [
  #         '--ignore-missing-imports',
  #         '--allow-untyped-defs',
  #         '--allow-incomplete-defs',
  #         '--no-warn-unused-ignores',
  #       ]
  #       additional_dependencies: [
  #         types-requests,
  #         pydantic,
  #         openai,
  #       ]
  #       exclude: ^(tests/|examples|test_retry)

  # Code quality with pylint (more strict)
  - repo: https://github.com/PyCQA/pylint
    rev: v3.3.3
    hooks:
      - id: pylint
        name: 🔬 Analyze with pylint
        args: [
          '--max-line-length=120',
          '--disable=C0103,C0114,C0115,C0116,R0913,R0903,R0902,W0212,W0621,W0613,W1203,W0718,W0123',
          '--good-names=i,j,k,x,y,z,id,tc,llm,_',
          '--min-similarity-lines=10',
          '--max-args=10',
        ]
        exclude: ^(tests/|examples)

  # Dead code detection (optional - may flag public API methods)
  # Uncomment to enable:
  # - repo: https://github.com/asottile/dead
  #   rev: v1.5.2
  #   hooks:
  #     - id: dead
  #       name: 💀 Check for dead code
  #       exclude: ^(tests/|examples)

  # Check requirements.txt
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v5.0.0
    hooks:
      - id: requirements-txt-fixer
        name: � Fix requirements.txt

  # UV lock file sync - ensure uv.lock is up to date with pyproject.toml
  - repo: local
    hooks:
      - id: uv-lock-check
        name: Check uv.lock is in sync with pyproject.toml
        entry: uv lock --check
        language: system
        files: ^pyproject\.toml$
        pass_filenames: false
      - id: uv-sync-on-toml-change
        name: Auto-sync uv.lock when pyproject.toml changes
        entry: bash -c 'uv lock && git add uv.lock'
        language: system
        files: ^pyproject\.toml$
        pass_filenames: false
        stages: [pre-commit]

# Note: Safety check for dependencies is better run separately:
# pip install safety
# safety check --json

# Configuration for detect-secrets
# Run once: detect-secrets scan > .secrets.baseline
# Update: detect-secrets scan --baseline .secrets.baseline
